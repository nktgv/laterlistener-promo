import asyncio
import re
import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
import psycopg2
from psycopg2.extras import RealDictCursor

load_dotenv()

API_TOKEN = os.getenv('BOT_TOKEN')
PG_DSN = os.getenv('POSTGRES_DSN')

logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')
logger = logging.getLogger(__name__)

EMAIL_REGEX = re.compile(r"^[\w\.-]+@[\w\.-]+\.\w+$")
TG_REGEX = re.compile(r"^@([A-Za-z0-9_]{5,32})$")

def init_db():
    with psycopg2.connect(PG_DSN, cursor_factory=RealDictCursor) as conn:
        with conn.cursor() as cur:
            cur.execute('''
                CREATE TABLE IF NOT EXISTS contacts (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT,
                    contact TEXT
                )
            ''')
            cur.execute('''
                CREATE UNIQUE INDEX IF NOT EXISTS idx_user_contact ON contacts(user_id, contact)
            ''')
            conn.commit()

def contact_exists(user_id: int, contact: str) -> bool:
    with psycopg2.connect(PG_DSN) as conn:
        with conn.cursor() as cur:
            cur.execute('SELECT 1 FROM contacts WHERE user_id = %s AND contact = %s', (user_id, contact))
            return cur.fetchone() is not None

def save_contact(user_id: int, contact: str):
    with psycopg2.connect(PG_DSN) as conn:
        with conn.cursor() as cur:
            cur.execute('INSERT INTO contacts (user_id, contact) VALUES (%s, %s)', (user_id, contact))
            conn.commit()

async def answer_message(message, user_id, text):
    loop = asyncio.get_running_loop()
    exists = await loop.run_in_executor(None, contact_exists, user_id, text)
    if exists:
        await message.answer("–ù–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    await loop.run_in_executor(None, save_contact, user_id, text)
    await message.answer(
        """
        üî• –£—Ä–∞! –¢—ã –≤ —Å–ø–∏—Å–∫–µ! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ–∫–∞–∑–∞–ª—Å—è –≤ —Ä—è–¥–∞—Ö –ø–µ—Ä–≤—ã—Ö ‚Äî –¥–ª—è –Ω–∞—Å —ç—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ. –¢–µ–ø–µ—Ä—å –Ω–∞—Å –Ω–µ –æ—Ç—á–∏—Å–ª—è—Ç —Å –≤—É–∑–∞ üòÖ –ê —Ç–µ–±–µ +100 –∫ –∫–∞—Ä–º–µ –∏ —Ä–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª–µ–∑–Ω–æ–º—É —Å–µ—Ä–≤–∏—Å—É, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Å–¥–µ–ª–∞–ª–∏ —Å –ª—é–±–æ–≤—å—é –∏ —Å–≤–æ–∏–º–∏ —Ä—É–∫–∞–º–∏
        
        –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–º–æ—á—å –µ—â—ë –±–æ–ª—å—à–µ ‚Äî –ø–æ–¥–µ–ª–∏—Å—å —ç—Ç–∏–º –±–æ—Ç–æ–º —Å–æ —Å–≤–æ–∏–º –¥—Ä—É–≥–æ–º üëá
        üîó @laterlistener_bot
        
        –ö—Å—Ç–∞—Ç–∏ –≤–æ—Ç –¥–µ—Ä–∂–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–∞–Ω—É–∞–ª –ø–æ 10 –ø–æ–ª–µ–∑–Ω—ã–º –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º –¥–ª—è —É—á—ë–±—ã –∏ —Ä–∞–±–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–º–∏ –º—ã –∏ —Å–∞–º–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ–ª—å–∑—É–µ–º—Å—è
        [–ü–†–ò–ö–†–ï–ü–õ–Å–ù–ù–´–ô –ú–ê–ù–£–ê–õ]
        """
    )

dp = Dispatcher()

@dp.message(CommandStart())
async def cmd_start(message: Message):
    username = message.from_user.username
    if username:
        kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π Telegram")]],
        resize_keyboard=True
        )
    await message.answer(
        """
        üëã –ü—Ä–∏–≤–µ—Ç! –ú—ã —Ç–µ—Å—Ç–∏—Ä—É–µ–º Telegram-–±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ, –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ –≤ –ø–æ–Ω—è—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏. –û—Å—Ç–∞–≤—å –Ω–∞–º —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç, –≥–¥–µ —Ç–µ–±–µ —É–¥–æ–±–Ω–µ–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–∞–∫ –±–æ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç‚úèÔ∏è
        
        @example –∏–ª–∏ youremail@example.com
        """,
        reply_markup=kb
    )

@dp.message()
async def handle_message(message: Message):
    if not message.from_user:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    user_id = message.from_user.id
    text = message.text.strip() if message.text else ""
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º username
    if text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π Telegram":
        username = message.from_user.username
        if username:
            await message.answer(f"@{username}")
            await answer_message(message=message, user_id=user_id, text=username)
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
    if EMAIL_REGEX.match(text) or TG_REGEX.match(text):
        await answer_message(message=message, user_id=user_id, text=text)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∏–ª–∏ Telegram-–∫–æ–Ω—Ç–∞–∫—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, youremail@example.com –∏–ª–∏ @example)")

async def main():
    if not API_TOKEN:
        raise RuntimeError('–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!')
    if not PG_DSN:
        raise RuntimeError('–ù–µ –∑–∞–¥–∞–Ω POSTGRES_DSN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!')
    loop = asyncio.get_running_loop()
    await loop.run_in_executor(None, init_db)
    bot = Bot(token=API_TOKEN)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main()) 