import asyncio
import re
import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
import psycopg2
from psycopg2.extras import RealDictCursor

load_dotenv()

API_TOKEN = os.getenv('BOT_TOKEN')
PG_DSN = os.getenv('POSTGRES_DSN')

logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')
logger = logging.getLogger(__name__)

EMAIL_REGEX = re.compile(r"^[\w\.-]+@[\w\.-]+\.\w+$")
TG_REGEX = re.compile(r"^@([A-Za-z0-9_]{5,32})$")

def init_db():
    with psycopg2.connect(PG_DSN, cursor_factory=RealDictCursor) as conn:
        with conn.cursor() as cur:
            cur.execute('''
                CREATE TABLE IF NOT EXISTS contacts (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT,
                    contact TEXT
                )
            ''')
            cur.execute('''
                CREATE UNIQUE INDEX IF NOT EXISTS idx_user_contact ON contacts(user_id, contact)
            ''')
            conn.commit()

def contact_exists(user_id: int, contact: str) -> bool:
    with psycopg2.connect(PG_DSN) as conn:
        with conn.cursor() as cur:
            cur.execute('SELECT 1 FROM contacts WHERE user_id = %s AND contact = %s', (user_id, contact))
            return cur.fetchone() is not None

def save_contact(user_id: int, contact: str):
    with psycopg2.connect(PG_DSN) as conn:
        with conn.cursor() as cur:
            cur.execute('INSERT INTO contacts (user_id, contact) VALUES (%s, %s)', (user_id, contact))
            conn.commit()

async def answer_message(message, user_id, text):
    loop = asyncio.get_running_loop()
    exists = await loop.run_in_executor(None, contact_exists, user_id, text)
    if exists:
        await message.answer("–¢—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ!")
        return
    await loop.run_in_executor(None, save_contact, user_id, text)
    await message.answer(
        """
        üî• –£—Ä–∞, —Ç—ã –≤ —Å–ø–∏—Å–∫–µ –ø–µ—Ä–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∞–ª –Ω–∞—à –ø—Ä–æ–µ–∫—Ç ‚Äî —ç—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å.  
–¢—ã –ø–æ–ª—É—á–∞–µ—à—å +100 –∫ –∫–∞—Ä–º–µ –∏ —Ä–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Å–¥–µ–ª–∞–ª–∏ —Å–≤–æ–∏–º–∏ —Ä—É–∫–∞–º–∏, —Å –∑–∞–±–æ—Ç–æ–π –∏ –≤–Ω–∏–º–∞–Ω–∏–µ–º –∫ –¥–µ—Ç–∞–ª—è–º.

–•–æ—á–µ—à—å –ø–æ–º–æ—á—å –Ω–∞–º –µ—â—ë –±–æ–ª—å—à–µ? –ü–æ–¥–µ–ª–∏—Å—å –±–æ—Ç–æ–º —Å –¥—Ä—É–≥–æ–º ‚Äî —ç—Ç–æ —Å–∏–ª—å–Ω–æ –Ω–∞—Å –ø–æ–¥–¥–µ—Ä–∂–∏—Ç:
üîó @laterlistener_promo_bot

–ê –≤–æ—Ç —Ç–µ–±–µ –±–æ–Ω—É—Å ‚Äî –º–∏–Ω–∏-–≥–∞–π–¥ —Å 10 –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Å–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ —É—á—ë–±–µ –∏ —Ä–∞–±–æ—Ç–µ:
[–ü–†–ò–ö–†–ï–ü–õ–Å–ù–ù–´–ô –ú–ê–ù–£–ê–õ]
        """
    )

dp = Dispatcher()

@dp.message(CommandStart())
async def cmd_start(message: Message):
    username = message.from_user.username
    if username:
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π Telegram")]],
            resize_keyboard=True
        )
    await message.answer(
        """
        üëã –ü—Ä–∏–≤–µ—Ç! –ú—ã –¥–µ–ª–∞–µ–º Telegram-–±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ, –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ –≤:

‚Äî —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É —Ç–µ–∫—Å—Ç–∞  
‚Äî –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏  
‚Äî –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç

–°–µ–π—á–∞—Å –º—ã —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –≤–µ—Ä—Å–∏—é ‚Äî –æ—Å—Ç–∞–≤—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç (email –∏–ª–∏ Telegram), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ ‚úçÔ∏è

–ù–∞–ø—Ä–∏–º–µ—Ä: youremail@example.com –∏–ª–∏ @example
        """,
        reply_markup=kb
    )
@dp.message()
async def handle_message(message: Message):
    if not message.from_user:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    user_id = message.from_user.id
    text = message.text.strip() if message.text else ""
    if text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π Telegram":
        username = message.from_user.username
        if username:
            await message.answer(f"@{username}")
            await answer_message(message=message, user_id=user_id, text=f"@{username}")
        else:
            await message.answer("–ü–æ—Ö–æ–∂–µ, —É —Ç–µ–±—è –Ω–µ –∑–∞–¥–∞–Ω username –≤ Telegram.\n–ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–¥–∞–π @–∏–º—è, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç.")
        return
    if EMAIL_REGEX.match(text) or TG_REGEX.match(text):
        await answer_message(message=message, user_id=user_id, text=text)
    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∏–ª–∏ Telegram-–∫–æ–Ω—Ç–∞–∫—Ç.\n–ü—Ä–∏–º–µ—Ä: youremail@example.com –∏–ª–∏ @example")

async def main():
    if not API_TOKEN:
        raise RuntimeError('–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!')
    if not PG_DSN:
        raise RuntimeError('–ù–µ –∑–∞–¥–∞–Ω POSTGRES_DSN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!')
    loop = asyncio.get_running_loop()
    await loop.run_in_executor(None, init_db)
    bot = Bot(token=API_TOKEN)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())